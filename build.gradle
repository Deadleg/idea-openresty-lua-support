import org.ajoberstar.grgit.Grgit
import org.kordamp.gradle.markdown.MarkdownToHtmlTask

buildscript {
    repositories {
        jcenter()
        maven { url 'http://dl.bintray.com/content/aalmiray/kordamp' }
    }
    dependencies {
        classpath 'org.kordamp:markdown-gradle-plugin:1.2.0'
    }
}

plugins {
    id 'idea'
    id "org.kordamp.markdown.convert" version "1.2.0"
    id "org.jetbrains.intellij" version "0.4.10"
    id "org.ajoberstar.grgit" version "3.1.1"
    id "org.jetbrains.kotlin.jvm" version "1.3.50"
}

group 'com.github.deadleg'
version '0.0.5-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

sourceSets {
    main {
        java.srcDirs 'src', 'gen'
        resources.srcDir 'resources'
    }
    test {
        java.srcDir 'tests'
    }
}

intellij {
    version '2019.2' //IntelliJ IDEA dependency
    updateSinceUntilBuild false
    pluginName 'openrestyLuaSupport'
    plugins = ['Lua:1.0.119']

    publishPlugin {
        username  user
        password  pass
    }
}

task('getLuaRepo') {
    doLast {
        def path = 'vendor/lua-nginx-module'
        if (!file(path).exists()) {
            Grgit.clone(dir: file(path), uri: 'https://github.com/openresty/lua-nginx-module.git')
        } else {
            Grgit.open(dir: file(path)).pull()
        }
    }
}

task('generateKeywords') {
    group 'documentation'
}

generateKeywords {
    doLast {
        File f = file('vendor/lua-nginx-module/doc/HttpLuaModule.wiki')
        def lines = f.readLines()
        def keywords = [];
        def start = lines.lastIndexOf('= Nginx API for Lua =')
        for (int i = start; i < lines.size(); i++) {
            def maybeHeading = lines.get(i);
            if (maybeHeading.startsWith("== ngx.")) {
                def field = maybeHeading.substring(3, maybeHeading.length() - 3)
                def shortField = maybeHeading.substring(7, maybeHeading.length() - 3)
                def syntax = lines.get(i + 2)
                def split = syntax.split(field)
                def args = ""
                if (split.length > 1 && split[1].startsWith("(")) {
                    args = " " + split[1].substring(1, split[1].indexOf(')'))
                }
                keywords.add(shortField + args)
            }
        }
        File outFile = file('resources/ngxkeywords.txt')
        outFile.write(keywords.join('\n'))
    }
}

task('generateDocs', dependsOn: 'generateKeywords') {
    group 'documentation'
}

generateDocs {
    doLast {
        File f = file('vendor/lua-nginx-module/README.markdown')
        List<String> keywords = file('resources/ngxkeywords.txt').readLines()
        def lines = f.readLines()
        keywords.each { key ->
            def keyword = key.split(' ')[0] // if there are args then we need to remove them
            def start = lines.findIndexOf({ it.startsWith "ngx.${keyword}" })
            println(lines.get(start))
            println(start)

            // Generate quick docs
            // Just grabs the syntax/context lines
            def maybeSyntax = lines.get(start + 3)
            def maybeContext = lines.get(start + 5)
            def quickDoc = []
            if (maybeSyntax.startsWith('**syntax') || maybeSyntax.startsWith('**context')) {
                quickDoc.add(maybeSyntax)
            }
            if (maybeSyntax.startsWith('**syntax') && maybeContext.startsWith('**context')) {
                quickDoc.add('')
                quickDoc.add(maybeContext)
            }

            // Get full docs
            def fullDoc = []
            def i = start + 2
            while (!lines.get(i).startsWith('[Back to TOC]')) {
                fullDoc.add(lines.get(i))
                i++
            }

            if (!new File("markdown/docs").exists()) {
                new File("markdown").mkdirs()
                new File("markdown/docs").mkdirs()
            }

            new File("resources/quickDocs/ngx.${keyword}.txt").write(
                    quickDoc.join('\n').replace('*', '').replace("&#42;", "*"))
            new File("markdown/docs/ngx.${keyword}.md").write(fullDoc.join('\n'))
        }
    }
}

task('convertDocs', type: MarkdownToHtmlTask) {
    group 'documentation'
    sourceDir = file('markdown/docs')
    outputDir = file('resources/docs')
}

task('generateDocumentation') {
    group 'documentation'
}

generateDocs.dependsOn(generateKeywords)
convertDocs.dependsOn(generateDocs)
generateDocumentation.dependsOn(convertDocs)

